* Background 

In 2007, I wrote a [[http://emacspeak.sourceforge.net/raman/publications/bc-emacspeak/publish-emacspeak-bc.html][chapter on Emacspeak]] for the book [[http://shop.oreilly.com/product/9780596510046.do][Beautiful Code
from OReilly]]. About a year later, I wrote an article called [[http://emacspeak.sourceforge.net/raman/publications/thinking-of-math/][Thinking
Of Mathematics]]. This article is being written over 10 years later as
a consolidated follow-up to the afore-mentioned publications. The goal
is to further crystalize some of the lessons learnt over the duration
of project Emacspeak, while stepping back to think more broadly about
Software Engineering.

* Emacspeak High-Level Goals 

This section enumerates the high-level goals that motivated Emacspeak
at its inception.  These have remained constant over the duration of
the project, with very few additional goals creeping in over time.

  1. Treat auditory  feedback as a first-class output modality.
  2. Audio formatted output consists of text-to-speech (TTS)  and 
     synchronized non-speech auditory icons.
  3. Auditory feedback is context-sensitive and designed to reduce
     cognitive load on the listener.
  4. Rich auditory feedback  is generated by /audio formatting/
     structured information objects along with the surrounding context.
  5. Leverage all aspects of the auditory display to efficiently and
     effectively communicate information along with its underlying
     structure and semantics.
  6. As a follow-on to (5), all content being authored/browsed shall
      be accessible via a consistent UI that facilitates information
     interchange across different activities; e.g., email a code
     fragment, cut-and-paste a code fragment  from an e-book to
     a source file.
  7. Writing prose == communicating with humans; Writing code ==
     communicating with machines. Design a user interface that treats
     these consistently.
  8. Editing and browsing content (prose and code)shall use structure-based navigation using a
     consistent set of key-bindings.
  9. The auditory interface shall  enable hierarchical views of all
     forms of content.
  
* Developing Robust Software Over  Time 

* Leverage Structure To Create And Organize Information

* Bushy Vs Deep Trees In Source Code 

* Avoiding The Least Common Denominator Effect 


* Defensive Coding To Maintain Long-Term Sanity 

* References 

  1. [[https://www.johndcook.com/blog/2015/06/18/most-important-skill-in-software/][Organisational Skills When Developing Software]]
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:t f:t inline:t num:t
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:t todo:t |:t
#+TITLE: Thinking Of Software Engineering: A Follow-Up To Beautiful Code.
#+DATE: <2017-01-03 Tue>
#+AUTHOR: T.V Raman
#+EMAIL: raman@google.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 26.0.50.1 (Org mode 9.0.3)
