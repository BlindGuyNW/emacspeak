Subject: Re: weird emacspeak bug: speech server not properly restarted after death

I tried the emacs-25 git branch, and the bug is still there.  I think
I'm beginning to get a handle on the cause.
Here's what I think is happening.

Server dies.
I press up-arrow to read the previous line.
Emacspeak first tries to send the stop command to dtk-speaker-process.
It cannot write to the dead process.
The message "process speaker not running" is generated.  That's going to
be spoken with dtk-notify-speak.
My server isn't multistream-capable, so my dtk-speaker-process and
dtk-notify-process should always be the same.
dtk-notify-speak calls dtk-notify-process, which returns
dtk-speaker-process.
It next calls dtk-speak, with dtk-speaker-process dynamically bound to
the return value of dtk-notify-process, which is a dead process.
dtk-speak notices that the process is dead, so it calls dtk-initialize,
which sets dtk-speaker-process to a newly-spawned Speaker.
The message "process speaker not running" is spoken.
When dtk-speak returns, we have a live Speaker, and it is bound to
dtk-speaker-process.
But we leave the (let) in dtk-notify-speak, and the old binding of
dtk-speaker-process is restored, replacing the new live Speaker with the
old dead one.
There's no way to get rid of the old dead speaker, because it is
perpetually resurrected.
What a great Halloween story!

I'm sure I've gotten many of the details wrong,
but the problem is in the dynamic binding in the dtk-notify-* functions.
I worked up a quick patch, and it does fix the bug.
Patch is attached.

-- Chris

diff --git a/lisp/dtk-speak.el b/lisp/dtk-speak.el
index 480fda6..becff86 100644
--- a/lisp/dtk-speak.el
+++ b/lisp/dtk-speak.el
@@ -844,8 +844,10 @@ current local  value to the result."
     (cond
      (prefix
       (unless (eq dtk-speaker-process (dtk-notify-process))
-        (let ((dtk-speaker-process (dtk-notify-process)))
-          (dtk-set-rate rate)))
+        (let ((dtk-saved-speaker-process dtk-speaker-process))
+	  (let ((dtk-speaker-process (dtk-notify-process)))
+	    (dtk-set-rate rate))
+	  (dtk-maybe-restore-speaker dtk-saved-speaker-process)))
       (setq tts-default-speech-rate rate)
       (setq-default dtk-speech-rate rate)
       (setq dtk-speech-rate rate))
@@ -1041,6 +1043,8 @@ important to be interrupted.")
 
 (defvar dtk-speaker-process nil
   "Speaker process handle.")
+(defvar dtk-real-speaker-process nil
+  "Copy of dtk-speaker-process to protect it from dynamic binding.")
 
 (defvar dtk-notify-process nil
   "Notify speaker  process handle.")
@@ -1674,7 +1678,7 @@ program. Port defaults to dtk-local-server-port"
 (defun  dtk-initialize ()
   "Initialize speech system."
   (declare (special dtk-speaker-process dtk-speak-server-initialized
-                    dtk-startup-hook))
+                    dtk-real-speaker-process dtk-startup-hook))
   (let* ((new-process (dtk-make-process "Speaker"))
          (state (process-status new-process)))
     (setq dtk-speak-server-initialized (memq state '(run open)))
@@ -1683,6 +1687,7 @@ program. Port defaults to dtk-local-server-port"
       (when (and dtk-speaker-process (process-live-p dtk-speaker-process))
         (delete-process dtk-speaker-process))
       (setq dtk-speaker-process new-process)
+      (setq dtk-real-speaker-process new-process)
       (run-hooks 'dtk-startup-hook)))))
 
 ;;;###autoload
@@ -1933,30 +1938,42 @@ Optional argument group-count specifies grouping for intonation."
    (t dtk-speaker-process)))
    
 
+(defun dtk-maybe-restore-speaker (saved)
+  (when (not (eq saved dtk-real-speaker-process))
+    (setq dtk-speaker-process dtk-real-speaker-process)))
+
 ;;;###autoload
 (defun dtk-notify-stop ()
   "Stop  speech on notification stream."
   (interactive)
-  (let ((dtk-speaker-process (dtk-notify-process)))
-    (dtk-stop)))
+  (let ((dtk-saved-speaker-process dtk-speaker-process))
+    (let ((dtk-speaker-process (dtk-notify-process)))
+      (dtk-stop))
+    (dtk-maybe-restore-speaker dtk-saved-speaker-process)))
 
 ;;;###autoload
 (defun dtk-notify-speak (text)
   "Speak text on notification stream. "
-  (let ((dtk-speaker-process (dtk-notify-process)))
-    (dtk-speak text)))
+  (let ((dtk-saved-speaker-process dtk-speaker-process))
+    (let ((dtk-speaker-process (dtk-notify-process)))
+      (dtk-speak text))
+    (dtk-maybe-restore-speaker dtk-saved-speaker-process)))
 
 ;;;###autoload
 (defun dtk-notify-say (text)
   "Say text on notification stream. "
-  (let ((dtk-speaker-process (dtk-notify-process)))
-    (dtk-say text)))
+  (let ((dtk-saved-speaker-process dtk-speaker-process))
+    (let ((dtk-speaker-process (dtk-notify-process)))
+      (dtk-say text))
+    (dtk-maybe-restore-speaker dtk-saved-speaker-process)))
 
 ;;;###autoload
 (defun dtk-notify-letter (letter)
   "Speak letter on notification stream. "
-  (let ((dtk-speaker-process (dtk-notify-process)))
-    (dtk-letter letter)))
+  (let ((dtk-saved-speaker-process dtk-speaker-process))
+    (let ((dtk-speaker-process (dtk-notify-process)))
+      (dtk-letter letter))
+    (dtk-maybe-restore-speaker dtk-saved-speaker-process)))
 
 (defsubst dtk-get-notify-alsa-device ()
   "Returns name of Alsa device for use as the notification stream."
@@ -1991,9 +2008,11 @@ Optional argument group-count specifies grouping for intonation."
 ;;;###autoload
 (defun dtk-notify-using-voice (voice text)
   "Use voice VOICE to speak text TEXT on notification stream."
-  (let ((dtk-speaker-process (dtk-notify-process)))
-    (dtk-speak-using-voice voice text)
-    (dtk-force)))
+  (let ((dtk-saved-speaker-process dtk-speaker-process))
+    (let ((dtk-speaker-process (dtk-notify-process)))
+      (dtk-speak-using-voice voice text)
+      (dtk-force))
+    (dtk-maybe-restore-speaker dtk-saved-speaker-process)))
 
 ;;;###autoload
 (defun dtk-notify-shutdown ()

