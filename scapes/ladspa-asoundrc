# $Id: .asoundrc,v 1.3 2012/03/08 19:19:31 raman Exp raman $
# defining DMix explicitly appears to work better
# on  Thinkpads
# {{{ default device is a mixer

#Note hw:1,0 on this laptop 
pcm.dmixer  {
    type dmix
    ipc_key 1024
    slave {
        pcm "hw:1,0"
        format s16_LE
        period_time 0
        period_size 1024
        buffer_size 4096
        rate 44100
    }
    bindings {
        0 0
        1 1
    }
}

pcm.!default {
        type asym
        playback.pcm "plug:dmixer"
        capture.pcm "sysdefault:CARD=PCH"
}

# }}}
# {{{bs2b:

## Adding these stanzas to your .asoundrc or /etc/asound.conf will
## create an ALSA output device called 'crossfeed' which outputs
## the bs2b crossfeed stream to a device of your choosing.

## LADSPA uses a 32-bit floating-point sample format, while most
## software uses 16-, 24-, or 32-bit integer formats. We input through
## a plug device to handle the conversion.

pcm.crossfeed {
  type plug
  slave.pcm "bs2b"
}

## If you use dmix or other processing filters, you should slave the
## plug:bs2b device to them directly, then have bs2b play to the hardware.
## This will minimize the impact of sample format conversion.
# TVR: Above didn't work writing to dmixer instead.
## This device passes its input through the bs2b LADSPA plugin, then
## passes it off to another PCM device. In this example, we use
## plug:dmixer to pass to our dmixer  (with a plug adapter for
## sample conversion).
pcm.bs2b {
  type ladspa
  slave.pcm "plug:dmixer" # Set this line to match your configuration
  path "/usr/lib/ladspa/"
  plugins [{
    label bs2b
    input {
      controls [ 725 6.0 ] # The defaults are 725Hz crossover frequency and 4.5dB rolloff
    }
  }]
}

# }}}
# {{{tap_reverb:

pcm.tap_reverb {
  type plug
  slave.pcm "tap_reverb_helper"
}


pcm.tap_reverb_helper {
  type ladspa
  slave.pcm "plug:dmixer" # Set this line to match your configuration
  path "/usr/lib/ladspa/"
  plugins [{
    label tap_reverb
    input {
      controls [1200 -1 -20 1 1 1 1 4] # Ambiance 
    }
  }]
}

# }}}
# {{{TTS Mono: 

#  The Route plugin routes audio among channles using a TTable .
#TTable is a transfer table.
        # Matrix of Source->Destination values
        # Unspecified entries default to 0.
        # Format: Source.Destination = Value

pcm.tts_mono_right { 
    type plug 
    slave.pcm { 
        type route 
        slave.pcm "dmixer"
        ttable {
            0.0 =  0.03 
            0.1 = 1
            1.0 =  0.03 
            1.1 = 1
        }
    } 
} 


pcm.tts_mono_left { 
    type plug 
    slave.pcm { 
        type route 
        slave.pcm "dmixer"
        ttable {
            0.0 =  1
            0.1 = 0.03
            1.0 =  1
            1.1 = 0.03 
        }
    } 
}


pcm.tts_mono_mid_left { 
    type plug 
    slave.pcm { 
        type route 
        slave.pcm "dmixer"
        ttable {
            0.0 =  0.66
            0.1 = 0.33
            1.0 =  0.66
            1.1 = 0.33
        }
    } 
}

pcm.tts_mono_mid_right { 
    type plug 
    slave.pcm { 
        type route 
        slave.pcm "dmixer"
        ttable {
            0.0 =  0.33
            0.1 = 0.66
            1.0 =  0.33
            1.1 = 0.66
        }
    } 
}

# }}}

# {{{end of file

# local variables:
# mode: sh
# folded-file: t
# end:

# }}}
